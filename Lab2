ORG 0



	acall	CONFIGURE_LCD ; BY DOING THIS WE CLEAR THE SCREEN AMONG OTHER THINGS AND ARE AT THE START OF FIRST ROW OF LCD

 MOV R1, #40H; USING R1 REGISTER FOR ADDRESS POINTING 

 MOV R3, #9H; Storing 9H in R3 = will be used as counter 

KEYBOARD_LOOP:

	acall KEYBOARD

	;now, A has the key pressed

	acall SEND_DATA; ENTERED KEY DISPLAYED ON LCD

	

	MOV @R1, A; SAVE INPUT CHARACTER IN MEMORY FROM LOCATIONS 40H-48H

	INC R1; MOVE TO NEXT ADDRESS LOCATION

	

	DJNZ R3, KEYBOARD_LOOP ; REPEAT THIS PROCESS UNTIL 9 CHARACTERS ARE INPUTTED



MOV A, #0C0H; SHIFT TO SECOND ROW OF LCD

acall SEND_COMMAND

clr c; clear carry because we will use subb (subtract with borrow operation to convert ASCII To HEX)



MOV A, 45H; MOVING FIRST DIGIT IN ASCII TO ACCUMULATOR

SUBB A,#30H ; CONVERTING ASCII TO HEX

MOV B, #100

MUL AB

MOV R7, A ; STORING MOST SIGNIFICANT DIGIT IN R7

MOV A, 46H ;MOVING SECOND DIGIT IN ASCII TO ACCUMULATOR

SUBB A, #30H ; CONVERTING ASCII TO HEX

MOV B, #10 

MUL AB 

ADD A, R7

MOV R7, A

MOV A, 47H ; MOVING THIRD DIGIT IN ASCII TO ACCUMULATOR

SUBB A, #30H ; CONVERTING ASCII TO HEX

ADD A, R7 ; IF ORIGINAL NUMBER= '170'. AFTER THIS STATEMENT, ACC = AAH OR 170D. Thus, number obtained in hex.



; NOW I WILL TO SOME ARITHMETIC OPERATIONS TO DETERMINE WHICH LOOKUP TABLE WE ARE LOOKING AT (I HAVE 4 LOOKUP TABLES: 0,1,2,3)



MOV B, #50

DIV AB ; AFTER OPERATION A = QUOTIENT, B = REMAINDER





MOV R3,#4 ; COUNT 1

MOV R4,#5 ; COUNT 2





CJNE A,#0, ACCNOT0

MOV DPTR, #sqrtTable0

MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE

MOV B, #4 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES

MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER

H0: 

MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 

MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY

ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD

MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0

INC dptr  

DJNZ R3, H0 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 

SJMP $







ACCNOT0: CJNE A, #1, ACCNOT1

MOV DPTR, #sqrtTable1

MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE

MOV B, #4 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 4 DIGITS WHICH OCCUPY 4 ADDRESSES

MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER

INC dptr

H1: 

MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 

MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY

ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD

MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0

INC dptr

DJNZ R3, H1 ; REPEAT 4 TIMES BCZ 4 DIGITS FOR FIRST 100 NUMBERS 

SJMP $ 

ACCNOT1: CJNE A, #2, ACCNOT2

MOV DPTR, #sqrtTable2

MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE

MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 5 DIGITS WHICH OCCUPY 5 ADDRESSES

MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER

INC dptr

INC DPTR

INC DPTR

INC DPTR

H2:  

MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 

MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY

ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD

MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0

INC dptr

DJNZ R4, H2 ; REPEAT 5 TIMES BCZ 5 DIGITS FOR SECOND 100 NUMBERS 

SJMP $ 

ACCNOT2: CJNE A, #3, ACCNOT3

MOV DPTR, #sqrtTable3

MOV A, B; PUT REMAINDER INTO ACCUMULATOR. IT SPECIFIES POSITION OF NUM IN A SPECIFIC LOOKUP TABLE

MOV B, #5 ;EVERY NUMBER IN THE FIRST/SECOND TABLE HAVE 5 DIGITS WHICH OCCUPY 5 ADDRESSES

MUL AB ; A = SPECIFIES ADDRESS LOCATION OF NUMBER

INC A

H3: 

MOV R6, A ;STORE ACCUMULATOR VALUE BCZ WILL BE LOST IN MOVC OPERATION 

MOVC A, @A+DPTR ; IF 1ST ITERATION, THEN FIRST DIGIT OF SQRT(NUM) IN A = ASCII VALUE = WE CAN DISPLAY CORRECTLY

ACALL SEND_DATA ; DISPLAY CHARACTER ON LCD

MOV A, R6 ; RECOVER ACCUMULATOR = POINTS AT ADDRESS LOCATION IN SQRTTABLE0

INC dptr

DJNZ R4, H3 ; REPEAT 5 TIMES BCZ 5 DIGITS FOR SECOND 100 NUMBERS 

ACCNOT3: SJMP $  



ACALL SEND_COMMAND	



CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD

	mov a,#38H	;TWO LINES, 5X7 MATRIX

	acall SEND_COMMAND

	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING

	acall SEND_COMMAND

	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)

	acall SEND_COMMAND

	mov a,#01H	;CLEAR DISPLAY SCREEN

	acall SEND_COMMAND

	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE

	acall SEND_COMMAND

	ret







SEND_COMMAND:

	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD

	clr p3.5		;RS=0 BEFORE SENDING COMMAND

	clr p3.6		;R/W=0 TO WRITE

	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN

	acall DELAY

	clr p3.7

	ret





SEND_DATA:

	mov p1,a		;SEND THE DATA STORED IN A TO LCD

	setb p3.5	;RS=1 BEFORE SENDING DATA

	clr p3.6		;R/W=0 TO WRITE

	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN

	acall DELAY

	clr p3.7

	ret





DELAY:

	push 0

	push 1

	mov r0,#50

DELAY_OUTER_LOOP:

	mov r1,#255

	djnz r1,$

	djnz r0,DELAY_OUTER_LOOP

	pop 1

	pop 0

	ret





KEYBOARD: ;takes the key pressed from the keyboard and puts it to A

	mov	P0, #0ffh	;makes P0 input

K1:

	mov	P2, #0	;ground all rows

	mov	A, P0

	anl	A, #00001111B

	cjne	A, #00001111B, K1

K2:

	acall	DELAY

	mov	A, P0

	anl	A, #00001111B

	cjne	A, #00001111B, KB_OVER

	sjmp	K2

KB_OVER:

	acall DELAY

	mov	A, P0

	anl	A, #00001111B

	cjne	A, #00001111B, KB_OVER1

	sjmp	K2

KB_OVER1:

	mov	P2, #11111110B

	mov	A, P0

	anl	A, #00001111B

	cjne	A, #00001111B, ROW_0

	mov	P2, #11111101B

	mov	A, P0

	anl	A, #00001111B

	cjne	A, #00001111B, ROW_1

	mov	P2, #11111011B

	mov	A, P0

	anl	A, #00001111B

	cjne	A, #00001111B, ROW_2

	mov	P2, #11110111B

	mov	A, P0

	anl	A, #00001111B

	cjne	A, #00001111B, ROW_3

	ljmp	K2

	

ROW_0:

	mov	DPTR, #KCODE0

	sjmp	KB_FIND

ROW_1:

	mov	DPTR, #KCODE1

	sjmp	KB_FIND

ROW_2:

	mov	DPTR, #KCODE2

	sjmp	KB_FIND

ROW_3:

	mov	DPTR, #KCODE3

KB_FIND:

	rrc	A

	jnc	KB_MATCH

	inc	DPTR

	sjmp	KB_FIND

KB_MATCH:

	clr	A

	movc	A, @A+DPTR; get ASCII code from the table 

	ret



;ASCII look-up table 

KCODE0:	DB	'1', '2', '3', 's'

KCODE1:	DB	'4', '5', '6', 'q'

KCODE2:	DB	'7', '8', '9', 'r'

KCODE3:	DB	'(', '0', ')', 't'







sqrtTable0:DB '0.00', '1.00', '1.41', '1.73', '2.00', '2.24', '2.45', '2.65', ' 2.83', '3.00'

           DB '3.16', '3.32', '3.46', '3.61', '3.74', '3.87', '4.00', '4.12', ' 4.24', '4.36'

           DB '4.47', '4.58', '4.69', '4.80', '4.90', '5.00', '5.10', '5.20', ' 5.29', '5.39'

	         DB '5.48', '5.57', '5.66', '5.74', '5.83', '5.92', '6.00', '6.08', ' 6.16', '6.24'	   

	         DB '6.32', '6.40', '6.48', '6.56', '6.63', '6.71', '6.78', '6.86', ' 6.93', '7.00'

sqrtTable1:  

	   DB '7.07', '7.14', '7.21', '7.28', '7.35', '7.42', '7.48', '7.55', ' 7.62', '7.68'

	   DB '7.75', '7.81', '7.87', '7.94', '8.00', '8.06', '8.12', '8.19', ' 8.25', '8.31'	   

	   DB '8.37', '8.43', '8.49', '8.54', '8.60', '8.66', '8.72', '8.77', ' 8.83', '8.89'

	   DB '8.94', '9.00', '9.06', '9.11', '9.17', '9.22', '9.27', '9.33', ' 9.38', '9.43'

	   DB '9.49', '9.54', '9.59', '9.64', '9.70', '9.75', '9.80', '9.85', ' 9.90', '9.95'

sqrtTable2:	   

	   DB '10.00', '10.05', '10.10', '10.15', '10.20', '10.25', '10.30', '10.34', ' 10.39', '10.44'	   

	   DB '10.49', '10.54', '10.58', '10.63', '10.68', '10.72', '10.77', '10.82', ' 10.86', '10.91'	

	   DB '10.95', '11.00', '11.05', '11.09', '11.14', '11.18', '11.22', '11.27', ' 11.31', '11.36'	

	   DB '11.40', '11.45', '11.49', '11.53', '11.58', '11.62', '11.66', '11.70', ' 11.75', '11.79'	

	   DB '11.83', '11.87', '11.92', '11.96', '12.00', '12.04', '12.08', '12.12', ' 12.17', '12.21'

sqrtTable3:	   

	   DB '12.25', '12.29', '12.33', '12.37', '12.41', '12.45', '12.49', '12.53', ' 12.57', '12.61'

	   DB '12.65', '12.69', '12.73', '12.77', '12.81', '12.85', '12.88', '12.92', ' 12.96', '13.00'	   

	   DB '13.04', '13.08', '13.11', '13.15', '13.19', '13.23', '13.27', '13.30', ' 13.34', '13.38'	   	   	

	   DB '13.42', '13.45', '13.49', '13.53', '13.56', '13.60', '13.64', '13.67', ' 13.71', '13.75'

	   DB '13.78', '13.82', '13.86', '13.89', '13.93', '13.96', '14.00', '14.04', ' 14.07', '14.11'	   



END
